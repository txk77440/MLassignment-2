# -*- coding: utf-8 -*-
"""Assignment2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ol4ojgSt6ftRsqK2M7zSw82nTie40K2U
"""

import pandas as pd
import numpy as np

#Read the CSV file ‘data.csv’
dat= pd.read_csv("/content/drive/MyDrive/data.csv")

dat.head

dat.head()

dat.dtypes

dat.Calories.describe()

# the basic statistical description about the data
dat.describe()

#Check if the data has null values.
dat.isnull().sum()

#Replace the null values with the mean
dat.fillna(dat.Calories.mean())

dat.isnull().sum()

dat.fillna(dat.mean(), inplace=True)

dat.isnull().sum()

dat.columns

#Selecting two columns and aggregate the data using: min, max, count, mean.
dat.groupby('Duration').agg({'Calories': ['mean', 'min', 'max']})

#Filter the dataframe to select the rows with calories values between 500 and 1000.
r=dat[((dat['Calories']>=500) & (dat['Calories']<=1000))]
r
#print(r.value_counts())

#Filter the dataframe to select the rows with calories values > 500 and pulse <100
dat[((dat['Calories']>500) & (dat['Pulse']<100))]

"""Using pandas.DataFrame.loc[] property you can select all columns you want and exclude one you don’t want. for example df.loc[:,df.columns] selects all columns and df.loc[:,df.columns != 'Duration'] ignores Duration column from the selection. Note that df.columns returns a pandas Series."""

#Create a new “df_modified” dataframe that contains all the columns from df except for “Maxpulse”
df=dat.loc[:,dat.columns!='MAxpulse']

df

df2=dat.drop('Maxpulse', axis=1)
df2

dat

#Delete the “Maxpulse” column from the main df dataframe
dat.drop('Maxpulse',axis=1)

dat

#Delete the “Maxpulse” column from the main df dataframe permanently
del dat['Maxpulse']

dat

#Convert the datatype of Calories column to int datatype
dat.Calories.dtypes

dat.Calories=dat.Calories.astype(int)

print(dat.dtypes)

dat.isnull().sum()

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
#Using pandas create a scatter plot for the two columns (Duration and Calories).
#dat.Calories
x=list(dat.Duration)
y=list(dat.Calories)
dat.plot.scatter(x='Duration',y='Calories', c='green')

#importing sklearn
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
import warnings
warnings.filterwarnings('ignore')

ds=pd.read_csv("/content/drive/MyDrive/glass.csv")

ds.head()

ds.info()

ds.describe()

ds.isnull().sum()

ds.shape

x=ds.iloc[:, :-1].values
y=ds.iloc[ :, -1].values

x_train, x_test, y_train, y_test= train_test_split(x, y, test_size=0.2,random_state=0)

from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

classifier=SVC()
classifier.fit(x_train,y_train)
y_pred=classifier.predict(x_test)
print(classification_report(y_test,y_pred))
print(confusion_matrix(y_test,y_pred))
print("accuracy is:", accuracy_score(y_pred,y_test))

#naviebase classifier
from sklearn.naive_bayes import GaussianNB
classifier=GaussianNB()
classifier.fit(x_train,y_train)
y_pred=classifier.predict(x_test)
print(classification_report(y_test,y_pred))
print(confusion_matrix(y_test,y_pred))
print("accuracy is:", accuracy_score(y_pred,y_test))

#BernoulliNB classifier
from sklearn.naive_bayes import BernoulliNB
classifier=BernoulliNB()
classifier.fit(x_train,y_train)
y_pred=classifier.predict(x_test)
print(classification_report(y_test,y_pred))
print(confusion_matrix(y_test,y_pred))
print("accuracy is:", accuracy_score(y_pred,y_test))

#ComplementNB classifier
from sklearn.naive_bayes import ComplementNB
classifier=ComplementNB()
classifier.fit(x_train,y_train)
y_pred=classifier.predict(x_test)
print(classification_report(y_test,y_pred))
print(confusion_matrix(y_test,y_pred))
print("accuracy is:", accuracy_score(y_pred,y_test))

#MultinomialNB classifier
from sklearn.naive_bayes import MultinomialNB
classifier=MultinomialNB()
classifier.fit(x_train,y_train)
y_pred=classifier.predict(x_test)
print(classification_report(y_test,y_pred))
print(confusion_matrix(y_test,y_pred))
print("accuracy is:", accuracy_score(y_pred,y_test))